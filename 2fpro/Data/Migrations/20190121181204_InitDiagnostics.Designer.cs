// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _2fpro.Data;

namespace _2fpro.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190121181204_InitDiagnostics")]
    partial class InitDiagnostics
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.GetSeq", "'GetSeq', '', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("_2fpro.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Delivery");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Firstname");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Payment");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Sirname");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("_2fpro.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatDescription");

                    b.Property<string>("CatType")
                        .HasMaxLength(300);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(300);

                    b.Property<int?>("Sequance");

                    b.Property<int>("Sortindex")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR GetSeq");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("_2fpro.Models.Config", b =>
                {
                    b.Property<int>("ConfigID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<string>("Keywords")
                        .HasMaxLength(150);

                    b.Property<string>("OfflineMessage");

                    b.Property<string>("Robots")
                        .HasMaxLength(500);

                    b.Property<bool>("SelectedIsOnlineID");

                    b.Property<string>("SiteAddress")
                        .HasMaxLength(100);

                    b.Property<string>("SiteName")
                        .HasMaxLength(150);

                    b.HasKey("ConfigID");

                    b.ToTable("Configs");

                    b.HasData(
                        new
                        {
                            ConfigID = 1,
                            SelectedIsOnlineID = false,
                            SiteName = "sitename"
                        });
                });

            modelBuilder.Entity("_2fpro.Models.Diagnostic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthUsersOnlineStatus");

                    b.Property<DateTime>("CurrDateTime");

                    b.Property<bool>("CustomBoolField");

                    b.Property<int>("CustomIntField3");

                    b.Property<string>("CustomStringField");

                    b.Property<string>("CustomStringField2");

                    b.Property<bool>("IsActivate");

                    b.Property<string>("TheMostPopularLocation");

                    b.Property<int>("UsersOnlineStatus");

                    b.HasKey("ID");

                    b.ToTable("Diagnostics");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AuthUsersOnlineStatus = 0,
                            CurrDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomBoolField = false,
                            CustomIntField3 = 0,
                            IsActivate = false,
                            UsersOnlineStatus = 0
                        });
                });

            modelBuilder.Entity("_2fpro.Models.Gallery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("GalleryData");

                    b.Property<string>("GalleryMimeType")
                        .HasMaxLength(100);

                    b.Property<string>("GalleryTitle")
                        .HasMaxLength(500);

                    b.Property<int>("Sortindex")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR GetSeq");

                    b.HasKey("ID");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("_2fpro.Models.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GalleryID");

                    b.Property<byte[]>("ImageData");

                    b.Property<string>("ImageMimeType")
                        .HasMaxLength(100);

                    b.Property<string>("ImageTitle")
                        .HasMaxLength(500);

                    b.Property<int>("Sortindex")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR GetSeq");

                    b.HasKey("ID");

                    b.HasIndex("GalleryID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("_2fpro.Models.ImportDataProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.Property<string>("Description");

                    b.Property<string>("ImgUrl");

                    b.Property<string>("IsDeleted");

                    b.Property<string>("Price");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("ImportProducts");
                });

            modelBuilder.Entity("_2fpro.Models.LiveUser", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FeedMessage")
                        .IsRequired();

                    b.Property<string>("GroupId");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsOnline");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("UserID");

                    b.ToTable("LiveUsers");
                });

            modelBuilder.Entity("_2fpro.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body");

                    b.Property<string>("BodyEng");

                    b.Property<string>("CustomField");

                    b.Property<bool>("IsPublish");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("MenuSection");

                    b.Property<int>("ParentId");

                    b.Property<string>("SeoDescription");

                    b.Property<string>("SeoKeywords");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR GetSeq");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Menues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPublish = false,
                            LastModifiedDate = new DateTime(2019, 1, 21, 21, 12, 4, 178, DateTimeKind.Local).AddTicks(7099),
                            MenuSection = 0,
                            ParentId = 0,
                            SortOrder = 0,
                            Text = "title",
                            Url = "Home"
                        });
                });

            modelBuilder.Entity("_2fpro.Models.Message", b =>
                {
                    b.Property<int>("MessID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("TextMess");

                    b.Property<int>("UserID");

                    b.Property<bool>("Visited");

                    b.HasKey("MessID");

                    b.HasIndex("UserID");

                    b.ToTable("LiveMessages");
                });

            modelBuilder.Entity("_2fpro.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<string>("Comment");

                    b.Property<string>("Country")
                        .HasMaxLength(300);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Delivery")
                        .HasMaxLength(300);

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(300);

                    b.Property<float>("OrderSum");

                    b.Property<string>("Payment")
                        .HasMaxLength(300);

                    b.Property<string>("Phone")
                        .IsRequired();

                    b.Property<int>("Sequance");

                    b.HasKey("ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("_2fpro.Models.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(300);

                    b.Property<string>("Cloth")
                        .HasMaxLength(500);

                    b.Property<string>("Color")
                        .HasMaxLength(500);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("Discount");

                    b.Property<float>("LastPrice");

                    b.Property<string>("Molding")
                        .HasMaxLength(500);

                    b.Property<int>("OrderID");

                    b.Property<float>("Price");

                    b.Property<string>("ProductName")
                        .HasMaxLength(300);

                    b.Property<int>("Quantity");

                    b.Property<string>("Screed")
                        .HasMaxLength(500);

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("_2fpro.Models.OrderStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("Sequance");

                    b.HasKey("ID");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("_2fpro.Models.Portfolio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<byte[]>("ImageData");

                    b.Property<string>("ImageMimeType");

                    b.Property<int?>("Price");

                    b.Property<string>("ProdLink");

                    b.Property<int?>("Sortindex")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR GetSeq");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("ID");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("_2fpro.Models.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Preview")
                        .HasMaxLength(500);

                    b.Property<byte[]>("PreviewPhoto");

                    b.Property<int>("Sortindex");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("ID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("_2fpro.Models.ProdImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageDataType");

                    b.Property<string>("ImageMimeType")
                        .HasMaxLength(300);

                    b.Property<int>("IsPreview");

                    b.Property<int>("ProductID");

                    b.Property<int>("Sortindex")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR GetSeq");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProdImages");
                });

            modelBuilder.Entity("_2fpro.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatName")
                        .HasMaxLength(500);

                    b.Property<int>("CategoryID");

                    b.Property<string>("Cloth")
                        .HasMaxLength(500);

                    b.Property<string>("Color")
                        .HasMaxLength(500);

                    b.Property<string>("Decor")
                        .HasMaxLength(500);

                    b.Property<string>("Description");

                    b.Property<int>("Discount");

                    b.Property<string>("Fill")
                        .HasMaxLength(500);

                    b.Property<string>("Lacquering")
                        .HasMaxLength(500);

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(500);

                    b.Property<string>("Material")
                        .HasMaxLength(500);

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Packaging")
                        .HasMaxLength(500);

                    b.Property<float>("PackagingSize");

                    b.Property<float>("Price");

                    b.Property<string>("ProductName")
                        .HasMaxLength(500);

                    b.Property<string>("ProductType");

                    b.Property<string>("Size")
                        .HasMaxLength(500);

                    b.Property<int?>("Sortindex")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR GetSeq");

                    b.Property<int>("VisitesCount");

                    b.Property<float>("Weight");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("_2fpro.Models.StaticSection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Preview")
                        .HasMaxLength(500);

                    b.Property<int>("SectionType");

                    b.Property<int>("Sequance")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEXT VALUE FOR GetSeq");

                    b.Property<string>("Title")
                        .HasMaxLength(300);

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.ToTable("StaticSections");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Content = "ss",
                            SectionType = 2,
                            Sequance = 0,
                            Title = "static2",
                            Type = 0
                        },
                        new
                        {
                            ID = 2,
                            Content = "ss",
                            SectionType = 3,
                            Sequance = 0,
                            Title = "static3",
                            Type = 0
                        },
                        new
                        {
                            ID = 3,
                            Content = "ss",
                            SectionType = 4,
                            Sequance = 0,
                            Title = "static4",
                            Type = 0
                        },
                        new
                        {
                            ID = 4,
                            Content = "ss",
                            SectionType = 5,
                            Sequance = 0,
                            Title = "static5",
                            Type = 0
                        },
                        new
                        {
                            ID = 5,
                            Content = "ss",
                            SectionType = 6,
                            Sequance = 0,
                            Title = "static6",
                            Type = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("_2fpro.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("_2fpro.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("_2fpro.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("_2fpro.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("_2fpro.Models.Image", b =>
                {
                    b.HasOne("_2fpro.Models.Gallery")
                        .WithMany("Images")
                        .HasForeignKey("GalleryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("_2fpro.Models.Message", b =>
                {
                    b.HasOne("_2fpro.Models.LiveUser", "LiveUser")
                        .WithMany("LiveMessages")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("_2fpro.Models.OrderItem", b =>
                {
                    b.HasOne("_2fpro.Models.Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("_2fpro.Models.ProdImage", b =>
                {
                    b.HasOne("_2fpro.Models.Product")
                        .WithMany("ProdImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("_2fpro.Models.Product", b =>
                {
                    b.HasOne("_2fpro.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
